import { ethers } from "hardhat";
// import { Wallet } from "ethers";
import { contractManager } from '../lib/contractManager';

async function main() {
    const [funder, dpsDeployer, dprDeployer, wttpDeployer] = await ethers.getSigners();
    // const dpsDeployer = new Wallet(process.env.DPS_DEPLOYER || "");
    // const dprDeployer = new Wallet(process.env.DPR_DEPLOYER || "");
    // const wttpDeployer = new Wallet(process.env.WTTP_DEPLOYER || "");
    
    // Estimate gas for deployments
    const DataPointStorage = await ethers.getContractFactory("DataPointStorage");
    const DataPointRegistry = await ethers.getContractFactory("DataPointRegistry");
    const WTTP = await ethers.getContractFactory("WTTP");

    const gasEstimates = {
        dps: await DataPointStorage.getDeployTransaction().then(tx => 
            ethers.provider.estimateGas(tx)),
        dpr: await DataPointRegistry.getDeployTransaction(
            ethers.ZeroAddress, // temporary address for estimation
            "0x352EBC51417C9511ce884547994b3eD6DcD2DbAE",
            ethers.parseUnits("1", "gwei"),
        ).then(tx => ethers.provider.estimateGas(tx)),
        wttp: await WTTP.getDeployTransaction().then(tx => 
            ethers.provider.estimateGas(tx))
    };

    // Get gas price and calculate required funding
    const gasPrice = await ethers.provider.getFeeData().then(data => data.gasPrice || 0n);
    const buffer = 1.25; // 25% buffer for safety

    // Fund deployers if needed
    const fundingPromises = [
        { deployer: dpsDeployer, gasLimit: gasEstimates.dps },
        { deployer: dprDeployer, gasLimit: gasEstimates.dpr },
        { deployer: wttpDeployer, gasLimit: gasEstimates.wttp }
    ].map(async ({ deployer, gasLimit }) => {
        const requiredFunding = BigInt(gasLimit) * BigInt(gasPrice) * BigInt(Math.ceil(buffer * 100)) / BigInt(100);
        const balance = await ethers.provider.getBalance(deployer.address);
        console.log("Required funding:", ethers.formatEther(requiredFunding));
        console.log("Balance:", ethers.formatEther(balance));
        if (balance < requiredFunding) {
            const fundingNeeded = requiredFunding - balance;
            console.log(`Funding ${deployer.address} with ${ethers.formatEther(fundingNeeded)} ETH`);
            await funder.sendTransaction({
                to: deployer.address,
                value: fundingNeeded
            });
        }
    });

    // Wait for all funding transactions to complete
    await Promise.all(fundingPromises);
    console.log("Funding completed");

    // Deploy or load DataPointStorage
    const existingDPSAddress = contractManager.getContractAddress('dataPointStorage');
    let dataPointStorage;
    
    if (existingDPSAddress) {
        console.log("Loading existing DataPointStorage at:", existingDPSAddress);
        dataPointStorage = DataPointStorage.attach(existingDPSAddress);
    } else {
        // Connect the contract factory to the specific deployer
        const dpsWithSigner = DataPointStorage.connect(dpsDeployer);
        dataPointStorage = await dpsWithSigner.deploy({gasLimit: gasEstimates.dps});
        await dataPointStorage.waitForDeployment();
        console.log("DataPointStorage deployed to:", dataPointStorage.target, " with deployer:", dpsDeployer.address);
        contractManager.saveContract('dataPointStorage', String(dataPointStorage.target));
    }

    // Deploy or load DataPointRegistry
    const existingDPRAddress = contractManager.getContractAddress('dataPointRegistry');
    let dataPointRegistry;
    
    if (existingDPRAddress) {
        console.log("Loading existing DataPointRegistry at:", existingDPRAddress);
        dataPointRegistry = DataPointRegistry.attach(existingDPRAddress);
    } else {
        // Connect the contract factory to the specific deployer
        const dprWithSigner = DataPointRegistry.connect(dprDeployer);
        dataPointRegistry = await dprWithSigner.deploy(
            dataPointStorage.target,
            "0x352EBC51417C9511ce884547994b3eD6DcD2DbAE",
            ethers.parseUnits("1", "gwei"),
            {gasLimit: gasEstimates.dpr}
        );
        await dataPointRegistry.waitForDeployment();
        console.log("DataPointRegistry deployed to:", dataPointRegistry.target, " with deployer:", dprDeployer.address);
        contractManager.saveContract('dataPointRegistry', String(dataPointRegistry.target));
    }

    // Deploy or load WTTP
    const existingWTTPAddress = contractManager.getContractAddress('wttp');
    let wttp;
    
    if (existingWTTPAddress) {
        console.log("Loading existing WTTP at:", existingWTTPAddress);
        wttp = WTTP.attach(existingWTTPAddress);
    } else {
        // Connect the contract factory to the specific deployer
        const wttpWithSigner = WTTP.connect(wttpDeployer);
        wttp = await wttpWithSigner.deploy({gasLimit: gasEstimates.wttp});
        await wttp.waitForDeployment();
        console.log("WTTP deployed to:", wttp.target, " with deployer:", wttpDeployer.address);
        contractManager.saveContract('wttp', String(wttp.target));
    }

    // // After all deployments:
    // const fs = require('fs');
    // const path = require('path');
    
    // const constantsPath = path.join(__dirname, '../src/types/constants.ts');
    // const constants = fs.readFileSync(constantsPath, 'utf8');
    // const updatedConstants = constants
    //     .replace(
    //         /export const WTTP_CONTRACT = '.*?'/,
    //         `export const WTTP_CONTRACT = '${wttp.target}'`
    //     )
    //     .replace(
    //         /export const DATAPOINT_REGISTRY = '.*?'/,
    //         `export const DATAPOINT_REGISTRY = '${dataPointRegistry.target}'`
    //     );
    
    // fs.writeFileSync(constantsPath, updatedConstants);
    // console.log('Updated WTTP_CONTRACT and DATAPOINT_REGISTRY in constants file');

    return {
        dataPointStorage: dataPointStorage.target,
        dataPointRegistry: dataPointRegistry.target,
        wttp: wttp.target
    };
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    }); 